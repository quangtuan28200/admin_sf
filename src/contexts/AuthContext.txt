import { getAuth, signInWithEmailAndPassword, signOut } from "firebase/auth";
import { collection, onSnapshot } from "firebase/firestore";
import React, { createContext, useReducer } from "react";
import { db } from "../ConfigDB/firebase";
import { authReducer } from "../reducers/authReducer";

export const AuthContext = createContext();

const AuthContextProvider = ({ children }) => {
    const [authState, dispatch] = useReducer(authReducer, {
        authLoading: false,
        isAuthenticated: false,
        salon: null,
    });

    // console.log(authState);

    // useEffect(() => {
    //     loadSalon();
    // }, []);

    // Get store
    const loadSalon = () => {
        // console.log(getAuth().currentUser);

        onSnapshot(collection(db, "salons"), (snapshot) => {
            snapshot.docs.map((salon) => {
                if (salon.data().id === getAuth().currentUser.uid) {
                    dispatch({
                        type: "SET_AUTH",
                        payload: {
                            isAuthenticated: true,
                            salon: salon.data(),
                        },
                    });
                }
            });
        });
    };

    // useEffect(() => loadSalon(), []);

    // Login store
    const loginSalon = (loginFormData) => {
        signInWithEmailAndPassword(
            getAuth(),
            loginFormData.email,
            loginFormData.password
        )
            .then(() => {
                loadSalon();
            })
            .catch((error) => alert(error));
    };

    // Logout
    const logoutSalon = () => {
        signOut(getAuth())
            .then(() => {
                dispatch({
                    type: "SET_AUTH",
                    payload: { isAuthenticated: false, salon: null },
                });
            })
            .catch((error) => {
                alert(error);
            });
    };

    // Context data
    const authContextData = {
        loginSalon,
        logoutSalon,
        authState,
    };

    // Return provider
    return (
        <AuthContext.Provider value={authContextData}>
            {children}
        </AuthContext.Provider>
    );
};

export default AuthContextProvider;
